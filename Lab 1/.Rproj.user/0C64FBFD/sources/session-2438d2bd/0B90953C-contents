---
title: "PSTAT 5LS Lab 1"
author: "TA Name Here"
date: "Week of January 15, 2024"
output:
  beamer_presentation:
    theme: AnnArbor
---

# Announcements & Recap

## Announcements

Insert any relevant announcements, important dates, things you want to remember here.

For instance, you might have them remember the date and time that homework and lab are due, and remind them that the deadlines are firm.

# Learning Objectives

## R Learning Objectives

1.  Learn the difference between R, RStudio, and R Markdown
2.  Become familiar with the RStudio interface
3.  Understand key components of an R Markdown document
4.  Learn how to use R to do basic calculations

## Functions covered in this lab

1.  `head()`
2.  `str()`

# Lab Tutorial

## Getting Started: What is R?

In Statistics, we often use computers to analyze data. There are a lot of programs that can help you do statistical analyses. One of the most popular (and powerful) is called R. R is a "statistical computing environment" that is designed for manipulating data, doing calculations, and making graphical displays. R works by writing **R code**.

That might sound scary, but *don't worry*: this is not a programming class. Over the course of the quarter, you'll learn how to edit and write some basic R code to help you analyze data to answer research questions. Our goal in lab is to help you learn the basics of R and R coding, but through the lens of answering statistical questions.

## What are all these "R" terms?

There are a lot of "R" words floating around. What's going on?

-   *R* is a "statistical computing environment" that's designed for manipulating data, generating plots, and performing analyses. It's also a programming language. You'll be *using R* this quarter.
-   *R Studio* is an "integrated development environment (IDE)" for R (you'll never have to hear the term IDE again in this class). Basically, it's a pretty interface that makes working with R easier. You use R inside of R Studio. If R is ice cream, R Studio is the cone or cup.
-   *R Markdown* is a way to write pretty analysis reports that combines R code, R output (plots, analysis results, etc.) and text in one document. This lab document is an R Markdown report!

## JupyterHub

We will be accessing R and RStudio through JupyterHub. JupyterHub is a web-based multi-user environment that will allow us to share with you the files you need for lab. LSIT has provided us with access to JupyterHub.

Each time we begin a lab, navigate to <https://pstat5ls.lsit.ucsb.edu/>.

This will open your "instance" of JupyterHub and copy all necessary files for PSTAT 5LS labs.

## Initial View of RStudio

Click on the 'PSTAT5ls-winter2024' folder.

![](assets/images/RStudio-initial.png)

## Accessing the Lab for the Week

After you have clicked on the 'PSTAT5ls-winter2024' folder, click on the folder for the week's lab.

\includegraphics[width=8cm]{assets/images/RStudio_Lab1_Folder.png}

## Working with R in JupyterHub

When you navigate to <https://pstat5ls.lsit.ucsb.edu/>, you are telling JupyterHub to bring in all of the files that Professor Miller has in our PSTAT 5LS site. This means that files you have worked on will be overwritten.

To avoid your work being overwritten, **rename** both the notes and report files. For Lab 1, you want to rename lab1-notes.Rmd and lab1-report.Rmd. You could add your name to the file name (e.g., lab1-notes-drmiller.Rmd and lab1-report-drmiller.Rmd).

## Renaming Files

To rename a file, check the box next to the file you want to rename. Click "Rename" in the files pane, rename the file, then click OK.

![](assets/images/beforeRename.png){width="50%"}

Your file will then appear with its new name. ![](assets/images/afterRename.png){width="50%"}

<!-- Tell students that they are also welcome to download R and RStudio to their local machines but that we suggest using JupyterHub so that instructional team members can access their work if they are stuck (not a 24/7 service but during office hours)** -->

## RStudio Project Screen

![](assets/images/r_homescreen.png)

## R Markdown

R Markdown lets you combine text, R code, and plots in one pretty, reproducible report. If you're curious about this, you can find more details on using R Markdown at <http://rmarkdown.rstudio.com>.

R Markdown runs code contained in "chunks". A chunk looks like this:

![](assets/images/chunk.png)

```{r helloWorld}

print("Hello world!")

```

## R Markdown Chunk

![](assets/images/chunk.png)

Notice that the code, `print("Hello world!")` is contained between three backticks (```` ``` ````, below the esc key on a US English keyboard; the same key as the tilde) and some stuff in curly braces {}. This is how R Markdown knows where your chunks start and stop. We'll almost always provide pre-made chunks for you to use.

## Running a Chunk

You can just run a single chunk by clicking the green "play" button in the upper right corner of the chunk. It's usually a good idea to click the "Run All Chunks Above" button immediately to the left of the play button first. So you should click Run All Chunks Above, then the play button.

![](assets/images/run_chunk.png)

If you can't find the play button, just highlight the code you want to run and click the Run button in the top right corner of the editor pane.

Let's try this code together in the `tryIt1` chunk in your notes document!

## Knitting a Document

When you click the **Knit** button in R Studio, a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.

![](assets/images/knit-button.png)

## Tips for R Markdown

1.  **Knit and knit often**: Frequently knitting your document will help you make sure that all your code works and that the document looks the way you want.

2.  **Don't be afraid to experiment**: Nobody gets things exactly right the first time, and we all forget how things work sometimes. Keep trying, and you'll eventually get what you want!

3.  **Formatting**: You can make text **bold** by surrounding it with two asterisks (`**`) and *italic* by surrounding it with one asterisk (`*`). You can make text `look like code` by surrounding it with single backticks.

## Using R as a Calculator

At it's most basic, R is a fancy calculator.

Let's try this example together in the `tryIt2` chunk in your lab notes!

Remember, you can run the code in this chunk by clicking the green "play" button in the upper right corner of the chunk.

```{r calculatorExample}

5 * 7

```

When you run the chunk, you'll see a `[1]` before the output of `35`. *Just ignore this. The result is `35`.*

All of the symbols you think you'd use to do math work: `+` for addition, `-` for subtraction, `*` for multiplication, `/` for division, `^` for exponentiation.

## R Function Syntax

We'll be using R primarily through the use of *functions*. A function generally looks something like this:

```{r genericFunction, eval = F}

function.name(argument1, argument2, ...)

```

Notice that we have the name of the function, followed immediately by an open parenthesis \textcolor{blue}{`(`} without a space, then a sequence of *arguments* to the function, separated by commas \textcolor{blue}{`,`}, then a close parenthesis \textcolor{blue}{`)`}.

## R "Assignment" Syntax

Often, we want R to remember the results of a calculation so that we can use it later. We can give the result of some code a name by **assigning** it to something.

```{r assignmentDemo}

x <- 36 / 6

```

We read that code as "x *gets* 36 / 6". The arrow is made using the less-than symbol (`<`, shift + comma on a US English keyboard) and a hyphen.

Run the `tryIt3` code chunk in your notes to assign 36 divided by 6 to the variable `x`.

## R "Assignment" Syntax

Now, we've stored the result as `x`, and R will remember that `x` is 6. You can see in the environment pane in R Studio (top right) that there's now a "value" called `x` and it's 6. You can also access the value of `x` by typing `x` into R. Check it out:

```{r x}

x

```

Run the `tryIt4` code chunk in your notes to see the value that R stored for the variable `x`.

## R is Case-Sensitive

R is "case-sensitive", which means that upper-case letters are *different from* lower-case letters. Notice what happens when we ask R for the value of `X`:

```{r X, error = T}

X

```

Run the `tryIt5` code chunk in your notes to see what happens.

When giving things names in R, you can only use a combination of letters, numbers, periods, and underscores, and the **names have to start with a letter or a period**. People tend to use underscores or periods instead of spaces.

## Common Errors

Watch what happens when you try to assign something to a "bad" name:

\small
```{r badName1, error = T}
tik tok <- 12
```

```{r badName2, error = T}
4eva <- 4 * 2
```

```{r badName3, error = T}
_hi_mom <- 5^2
```

## Common Errors

The errors saying "unexpected symbols" or "unexpected input" are R's way of telling you that these names are not allowed, and that you should use a different name. Here's how we'd correct these:

```{r goodNames}

tiktok <- 12

forever <- 4 * 2

hi_mom <- 5^2

```



## Knit Your Document One Final Time

Before you turn in your document, you want to be sure to knit one more time. This is just in case you have made any changes.

Be sure that a popup window shows you the file! Otherwise there is an error in the creation of the document. You should troubleshoot the markdown file.

Be sure that you read over your file and make sure that it looks right! If pieces are missing, then there is an error in the creation of the document. You should troubleshoot the markdown file.

## Export Your .pdf File

Did you notice that when you knit, the document that is created is a .pdf file? Be sure that you always grab the **.pdf** document to submit your lab report on Gradescope!

-   In the Files pane, check the box next to `lab1-report-yourname.pdf.`

![](assets/images/pdf_checkbox.png){width="50%"}

## Export Your .pdf File Continued

-   Click More &rarr; Export...

\includegraphics[width=10cm]{assets/images/pdf_export.png}

## Export Your .pdf File Continued

-   Click Download and save the file on your computer in a folder you'll remember and be able to find later. You can just call the file `lab1-report-yourname.pdf` or whatever else you'd like (aslong as you remember what you called it!).

\includegraphics[width=8cm]{assets/images/pdf-download-button.png}

## Submit to Gradescope

Access Gradescope through Canvas

![](assets/images/gradescope_in_canvas.png){width="75%"}

## Submit to Gradescope Continued

\small

-   Click on the assignment name (e.g., Lab 1 Report).
-   Click Submit PDF &rarr; Select PDF &rarr; locate the file &rarr; Upload PDF. You can only submit one PDF file per assignment.
-   On your screen, you should see a list of the questions/problems in your assignment and thumbnails of your PDF page(s). For each question, click the question on the left and the PDF page(s) that contains the answers on the right.
-   Now, click Submit. When your submission is successful, you will be sent to a new page to view your submission, you’ll see a success message on your screen, and you’ll receive an email. If your submitted file looks good, you see the success message, and you get the confirmation email, you’re done!
-   If you need to, select the Resubmit button in the bottom right corner of your screen below your submission. Then, repeat the steps above as many times as needed before the assignment due date passes. We will only see your most recent submission when we grade your lab report. All your past submissions are in your Submission History.

# Questions

## What Questions Do You Have?

# Lab Report

## Lab Report

Now it's time to work on the `lab1-report.Rmd` file. It should be open in your Markdown window; if not, go to the Files window in the bottom right corner and click on the file name.

Complete the questions in the lab report document. Be sure to ask questions as you work on this!

Instructions on how to turn the assignment in can be found at the end of the markdown file.
